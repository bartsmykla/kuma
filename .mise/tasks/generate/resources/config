#!/usr/bin/env bash

set -o errexit   # Exit immediately if any command has a non-zero exit status (error)
set -o errtrace  # Ensure that traps are inherited by functions, command substitutions, and subshells
set -o nounset   # Treat any unset variables as an error and exit immediately
set -o pipefail  # If any command in a pipeline fails, the entire pipeline fails

source "$__TASKS_SCRIPTS_PATH/common.sh"
source "$__TASKS_SCRIPTS_PATH/variables.sh"

#MISE description="Generate a configuration file for the given resources"
#MISE wait_for=["generate:resources:base"]
#USAGE flag "--resources-dir" {
#USAGE   arg "<dir>"
#USAGE   help "Base directory for resources (e.g., pkg/plugins/policies)"
#USAGE }
#USAGE flag "--output-file" {
#USAGE   arg "<file>"
#USAGE   help "Path to save the generated configuration file"
#USAGE }

___task_r_resources_dir="${usage_resources_dir:-${RESOURCES_DIR:-}}"
___task_output_file="${usage_output_file:-"pkg/config/${___task_r_resources_dir#pkg/}/zz_generated.policies.go"}"
read -r -a ___task_resources <<< "$(common::get_resources "$___task_r_resources_dir")"

variables::verify

# Collect resource CRDs and extract their plural names
resource_rows=$(
  for p in "${___task_resources[@]}"; do
    if [[ -f "$___task_r_resources_dir/$p/zz_generated.plugin.go" ]]; then
      yq '"	\"" + .spec.names.plural + "\","' "$(find "$___task_r_resources_dir/$p/k8s/crd" -type f -print -quit)"
    fi
  done | sort -u
)

# Write the configuration file
cat <<EOF > "$___task_output_file"
// Generated by ${MISE_TASK_FILE#"$MISE_PROJECT_ROOT/"}
// To update this file run "mise run generate"

package ${___task_r_resources_dir##*/}

var DefaultEnabled = []string{
$resource_rows
}
EOF
