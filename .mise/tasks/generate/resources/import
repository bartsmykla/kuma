#!/usr/bin/env bash

set -o errexit   # Exit immediately if any command has a non-zero exit status (error)
set -o errtrace  # Ensure that traps are inherited by functions, command substitutions, and subshells
set -o nounset   # Treat any unset variables as an error and exit immediately
set -o pipefail  # If any command in a pipeline fails, the entire pipeline fails

source "$__TASKS_SCRIPTS_PATH/common.sh"
source "$__TASKS_SCRIPTS_PATH/variables.sh"

#MISE description="Generate Go imports and resource mappings for plugins"
#MISE wait_for=["generate:resources:base"]
#USAGE flag "--resources-dir" {
#USAGE   arg "<dir>"
#USAGE   help "Base directory for resources (e.g., plugins/policies)"
#USAGE }
#USAGE flag "--go-module" {
#USAGE   arg "<name>"
#USAGE   help "Go module name (e.g., github.com/kumahq/kuma)"
#USAGE }

___task_go_module="${usage_go_module:-${GO_MODULE:-$__GENERATE_GO_MODULE}}"
___task_r_resources_dir="${usage_resources_dir:-${RESOURCES_DIR:-}}"
read -r -a ___task_resources <<< "$(common::get_resources "$___task_r_resources_dir")"

variables::verify

# Collect imports
imports=$(
  for c in "${___task_resources[@]}"; do
    if [[ -f "$___task_r_resources_dir/$c/zz_generated.plugin.go" ]]; then
      printf '"%s"\n' "$___task_go_module/$___task_r_resources_dir/$c"
    fi
  done
)

# Generate policy mappings
mappings=$(
  for c in "${___task_resources[@]}"; do
    if [[ -f "$___task_r_resources_dir/$c/zz_generated.plugin.go" ]]; then
      policy_crd_file=$(find "$___task_r_resources_dir/$c/k8s/crd" -type f -print -quit)
      plural=$(yq '.spec.names.plural' "$policy_crd_file")
      printf '"%s": {InitFn: %s.InitPlugin, Initialized: false},\n' "$plural" "$c"
    fi
  done
)

cat <<EOF | gofmt > "$___task_r_resources_dir/zz_generated.modules.go"
// Generated by ${MISE_TASK_FILE#"$MISE_PROJECT_ROOT/"}
// To update this file run "mise run generate"

package ${___task_r_resources_dir##*/}

import (
	"github.com/kumahq/kuma/pkg/core/plugins"
	$imports
)

var NameToModule = map[string]*plugins.PluginInitializer{
  $mappings
}
EOF
