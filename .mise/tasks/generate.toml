["generate:protos"]
description = "Generate Go and gRPC code from protobuf definitions in specified directories"

depends = ["generate:protos:go-modules"]

sources = [
    "**/*.proto",
    "{{ env.__KUMA_DIR }}/**/*.proto",
    "{{ env.__TOOLS_DIR_PROTOS }}/**/*.proto",
]

outputs = { auto = true }

run = """
{% set proto_paths = [env.__TOOLS_DIR_PROTOS, env.__KUMA_DIR, '.'] | unique %}
{% set plugins = ['protoc-gen-go', 'protoc-gen-go-grpc'] %}

find {{ env.__GENERATE_PROTO_DIRS }} \
  -name '*.proto' \
  -exec protoc \
{%- for path in proto_paths %} \
	--proto_path={{ path }} \
{%- endfor %} \
{%- for plugin in plugins %} \
    --plugin={{ plugin }}={{ exec(command='mise which ' ~ plugin) }} \
{%- endfor %} \
	--go_opt=paths=source_relative \
	--go_out=. \
	--go-grpc_opt=paths=source_relative \
	--go-grpc_out=. {} \\;
"""

###########################

["generate:envoy-imports"]
description = "Generate Go imports for Envoy packages from go-control-plane"

run = """
{% set package = 'github.com/envoyproxy/go-control-plane' %}
{% set imports = exec(command='mise exec go -- go list ' ~ package ~ '/...') %}
{#
# These env vars are set when running tasks but not during usage generation.
# That's why defaults are set to an empty string.
#}
{% set task_name = env.MISE_TASK_NAME | default(value='') %}
{% set task_file = env.MISE_TASK_FILE | default(value='') %}
{% set project_root = env.MISE_PROJECT_ROOT | default(value='') %}
{% set task_path = task_file | replace(from=project_root ~ '/', to='') %}

cat <<'EOF' > {{ env.__GENERATE_ENVOY_IMPORTS }}
package envoy

// Import all Envoy packages so protobuf are registered and are ready to used in functions such as MarshalAny.
// This file is autogenerated by {{ task_path }}. Run "mise run {{ task_name }}" to regenerate it after go-control-plane upgrade
import (
{%- for import in imports | split(pat='\n') %}
{%- if import is starting_with(package ~ "/envoy/") %}
	_ "{{ import }}"
{%- endif %}
{%- endfor %}
)
EOF
"""

###########################

["generate:tools:policy-gen"]
description = "Build the policy-gen tool from its source directory"

dir = "{{ env.__GENERATE_TOOLS_POLICY_GEN_SOURCE }}/generator"
sources = ["{{ env.__GENERATE_TOOLS_POLICY_GEN_SOURCE }}/**/*"]
outputs = "{{ env.__GENERATE_TOOLS_POLICY_GEN_BIN }}"

run = """
go build -o {{ env.__GENERATE_TOOLS_POLICY_GEN_BIN }} .
"""

###########################

["generate:tools:resource-gen"]
description = "Build the resource-gen tool from its source directory"

dir = "{{ env.__GENERATE_TOOLS_RESOURCE_GEN_SOURCE }}"
sources = ["{{ env.__GENERATE_TOOLS_RESOURCE_GEN_SOURCE }}/**/*"]
outputs = "{{ env.__GENERATE_TOOLS_RESOURCE_GEN_BIN }}"

run = """
go build -o {{ env.__GENERATE_TOOLS_RESOURCE_GEN_BIN }} .
"""

###########################

["generate:tools"]
description = "Build all tools necessary in other 'generate' tasks"

depends = ["generate:tools:*"]

###########################

["generate:oas2"]
depends = ["generate:tools:resource-gen"]
sources = ["api/openapi/openapi.cfg.yaml", "api/openapi/specs/**/*"]
outputs = { auto = true }

run = """
{% set specs = exec(command='find api/openapi/specs -type f') | split(pat='\n') | sort %}

{% for s in specs %}
{% set output_dir = s | dirname | replace(from='specs', to='types') %}
{% set output_file = ['zz_generated.', s | file_stem, '.go'] | join(sep='') %}
{% set output_path = [output_dir, output_file] | join_path %}

oapi-codegen -config api/openapi/openapi.cfg.yaml -o {{ output_path }} {{ s }}
{% endfor %}
"""

###########################

["generate:oas:ts"]
description = "Regenerate OpenAPI spec ready for typescript type generation"
depends = ["generate:oas", "generate:docs:openapi"]

###########################

["generate:types"]
depends = ["generate:tools:resource-gen"]

run = """
resource-gen --generator type --package mesh > pkg/core/resources/apis/mesh/zz_generated.resources.go
resource-gen --generator type --package system > pkg/core/resources/apis/system/zz_generated.resources.go
"""

###########################

["generate:builtin-crds"]
depends = ["generate:tools:resource-gen"]
sources = ["pkg/plugins/resources/k8s/native/api/**/*"]
outputs = { auto = true }

run = """
{% set root_path = 'pkg/plugins/resources/k8s/native/api' %}
{% set crds_dir = env.__GENERATE_HELM_CRDS_DIR %}

resource-gen -package mesh -generator crd > {{ root_path }}/v1alpha1/zz_generated.mesh.go
resource-gen -package system -generator crd > {{ root_path }}/v1alpha1/zz_generated.system.go
controller-gen "crd:crdVersions=v1" paths={{ root_path }}/... output:crd:artifacts:config={{ crds_dir }}
controller-gen object paths={{ root_path }}/...
"""

###########################

["generate:deep-copy:common"]
run = """
for d in api/common/*; do
controller-gen object paths="./api/common/${d##*/}/..."
done
"""

###########################

["generate:docs"]
depends = ["generate:docs:*"]

###########################

["generate:policies"]
env.RESOURCES_DIR = "{{ env.__GENERATE_POLICIES_DIR }}"
env.VALUES_PATH = ".plugins.policies"

run = """
mise run generate:deep-copy:common ::: generate:resources:**:*
"""

###########################

["generate:resources"]
env.RESOURCES_DIR = "{{ env.__GENERATE_RESOURCES_DIR }}"
env.VALUES_PATH = ".plugins.resources"

run = """
mise run generate:resources:*
"""

###########################

["generate"]
run = """
mise run \
    generate:protos ::: \
    generate:resources{% if env.__GENERATE_PROTO_DIRS is containing('./api') %} ::: \
    generate:types ::: \
    generate:builtin-crds{% endif %} ::: \
    generate:policies ::: \
    generate:oas{% for t in env.__GENERATE_EXTRA_DEPS_TARGETS | split(pat=' ') %}{% endfor %}
"""

